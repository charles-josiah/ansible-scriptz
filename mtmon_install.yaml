#
#   72  yum install "perl(ExtUtils::Embed)"
##   73  yum install perl(LWP::UserAgent) 
#   74  yum install "perl(LWP::UserAgent)" 
#   75  yum install "perl(HTTP::Response)" 
#

---
- hosts: veeam-rep 
  user: charles.a
  connection: ssh
  become_user: root
  become: true
  become_method: sudo
  #connection: paramiko
  gather_facts: yes

  vars:
    ansible_sudo_flags: '-H'
    mtmon_config: /usr/local/Multitask/mtadm/etc/mtadm.conf
    mtmon_server: '189.45.197.30'
    site_bkp: '170.84.17.136'

  tasks:

  - debug: msg="Nome {{ nome_cliente }} e chave  {{ transkey }}"

  - name: Habilita repositorio
    shell:  yum-config-manager --enable ol7_optional_latest
    ignore_errors: yes

  - name: Instalando pacotes do Centos
    when: ansible_distribution == "CentOS" or ansible_distribution == 'RedHat'
    action: "{{ ansible_pkg_mgr }} name={{ item }} state=present update_cache=yes"
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version|int > 6
    ignore_errors: yes
    with_items:
     - python-simplejson
     - libselinux-python
     - perl-CPAN
     - perl-Crypt-SSLeay
     - perl-Crypt-SSLeay.x86_64
     - perl-CGI
     - sharutils
     - perl-JSON
     - openssl-devel
     - perl-LWP-Protocol-https
    tags: instalar


  - name: install the 'Development tools' package group
    yum:
      name: "@Development tools"
      state: present

  - name: install the sysstat package 
    yum:
      name: sysstat 
      state: present



  - name: Instalando sharutils
    shell: dnf -y --enablerepo=PowerTools install sharutils
    ignore_errors: yes

  - name: Instalando  pacotes para o Debian
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    action: "{{ ansible_pkg_mgr }} name={{ item }} state=present update_cache=yes"
    with_items:
     - liblwp-protocol-https-perl
     - sysstat
     - sharutils
     - build-essential
    tags: instalar

  - name: Download do modulo do ansible para PERL
    get_url: url=http://cpanmin.us/
           dest=/tmp/cpanm.pl
    tags: instalar

  - name: Instalado o Modulo do ansible para PERL
    command: perl cpanm.pl App::cpanminus
    args:
       chdir: /tmp/
       creates: /usr/local/bin/cpanm
    tags: instalar

  - name: Ajustando link simbolicos
    file: src=/usr/local/bin/cpanm
          dest=/usr/bin/cpanm
          state=link
    ignore_errors: yes
    tags: instalar

  - name: Ajusta configuracao interativa do PERL
    shell: echo y | perl -MCPAN -e 'my $c = "CPAN::HandleConfig"; $c->load(doit => 1, autoconfig => 1); $c->edit(prerequisites_policy => "follow"); $c->edit(build_requires_install_policy => "yes"); $c->edit(connect_to_internet_ok => 1 );  $c->commit;' 
    register: install_cpanm
    changed_when: "'is up to date' not in install_cpanm.stdout"
    tags: instalar



  - name: Instala pacotes MTMON
    cpanm: name={{ item }}
    with_items:
        - JSON
        - CGI
        - Net::Ping
        - Rcs
        - Email::Sender
        - Mail::Sender
        - MIME::Base64
        - Net::Telnet
        - Net::Telnet::Cisco
        - Text::ParseWords
        - Template
        - HTTP::Headers
#        - IO::Socket::INET6
        - IO::Socket::IP
        - IO::Socket::SSL
        - Time::HiRes
        - Net::HTTP
        - LWP::UserAgent
#        - perl(ExtUtils::Embed)
#        - perl(LWP::UserAgent) 
#        - perl(LWP::UserAgent)
#        - perl(HTTP::Response) 
    tags: instalar


  - name: Testando os modulos 
    shell: for modulo in CPAN CGI LWP Net::Ping Net::Telnet Mail::Sender; do perl -M$modulo -e "print qq(\$$modulo::VERSION\t$modulo\n);"; done


  - name: Baixando pacotes MTMON - inst_mtadm
    get_url: url=http://mtfln.multitask.com.br/install/inst_mtadm.new
           dest=/tmp/inst_mtadm


  - name: Baixando pacotes MTMON - inst_mtmon_client
    get_url: url=http://mtfln.multitask.com.br/install/inst_mtmon_client.new
           dest=/tmp/inst_mtmon_client

  - name: Baixando pacotes MTMON - inst_mtmon_send
    get_url: url=http://mtfln.multitask.com.br/install/inst_mtsend.new
           dest=/tmp/inst_mtsend

  - name: executa mtmon - inst_mtadm
    shell: sh /tmp/inst_mtadm

  - name: executa mtmon - inst_mtmon_client
    shell: sh /tmp/inst_mtmon_client

  - name: executa mtmon - inst_mtsend
    shell: sh /tmp/inst_mtsend


  - name: "Remove CRON antes de comecar"
    cron:
       name=MTMON
       cron_file=MTMON
       state=absent
    tags: instalar_cron
    ignore_errors: yes 

  - name: Configura o CRON do MTMON
    cron:
       name="MTMON-MonitoraAmbiente"
       cron_file="MTMON"
       user=root
       minute=59
       job="/usr/local/Multitask/mtadm/bin/MonitoraAmbiente.sh"
    tags: instalar_cron

  - name: Configura o CRON do MTMON
    cron:
       name="MTMON-mtwdog"
       cron_file="MTMON"
       user=root
       minute=30
       hour=6,12,18
       job="/usr/local/Multitask/mtadm/bin/mtwdog_files.pl --sincronizar"
    tags: instalar_cron

  - name: Configura o CRON do MTMON
    cron:
       name="MTMON-Cron"
       cron_file="MTMON"
       user=root
       minute=0,15,30,45
       job="/usr/local/Multitask/mtmon/bin/mtmon_cron.pl"
    tags: instalar_cron

  - name: Configura o CRON do MTMON
    cron:
       name="MTMON-ColetaMemoria"
       cron_file="MTMON"
       user=root
       minute=0,15,30,45
       job="/usr/local/Multitask/mtadm/bin/ColetaMemoriaReal.sh"
    tags: instalar_cron

  - name: Configura o CRON do MTMON
    cron:
       name="MTMON-CronnoReset"
       cron_file="MTMON"
       user=root
       special_time=reboot
       job="/usr/local/Multitask/mtmon/bin/mtmon_cron.pl"
    tags: instalar_cron


  - name: Modifca algumas linhas do mtadm
    lineinfile:
      dest="{{ mtmon_config }}"
      regexp="{{ item.regexp }}"
      line="{{ item.line }}"
      backup=yes
    with_items:
        - { regexp: '(?i)Origem', line: '    Origem={{ nome_cliente }}' }
        - { regexp: '(?i)transkey', line: '    TransKEY={{ transkey }} '}
        - { regexp: '(?i)ServerMTMON', line: '    ServerMTMON={{ mtmon_server }} '}
        - { regexp: '(?i)sitebkp', line: '    SiteBKP={{ site_bkp }} '}
    tags: configura_mtmon

  - name: Atualizando tudo CPZIP
    command: /usr/local/bin/cpzip.pl
    tags: atualizar

  - name: Force Update
    command: /usr/local/Multitask/mtmon/bin/forcaUpload.pl
    tags: atualizar

#  - name: Executando Incluir Arquivos
#    command:  /usr/local/Multitask/mtadm/bin/IncluiArquivos.pl -a
#    tags: instalar_fim

  - name: Verifica se tudo funciona
    command: /usr/local/Multitask/mtmon/bin/mtmon_evento.pl --aplicacao=teste --mensagem="Teste de conexao $(hostname)" --debug --eventual --severidade=0
    tags: instalar_fim
